CrossTable() - You want to get an idea of the number, and percentage of defaults. Useful for categorical data.
   prop.r = TRUE  - row-wise proportions, 
   prop.c , prop.t and prop.chisq = FALSE 
   (if TRUE, and this would lead to inclusion of column proportions, 
   table proportions and chi-square contributions for each cell)

Missing values

DELETE
# Look at summary of loan_data
summary(loan_data$int_rate)

# Get indices of missing interest rates: na_index
na_index <- which(is.na(loan_data$int_rate))

# Remove observations with missing interest rates: loan_data_delrow_na
loan_data_delrow_na <- loan_data[-na_index, ]

# Make copy of loan_data
loan_data_delcol_na <- loan_data

# Delete interest rate column from loan_data_delcol_na
loan_data_delcol_na$int_rate <- NULL

REPLACE WITH MEDIAN
# Compute the median of int_rate
median_ir <- median(loan_data$int_rate, na.rm = TRUE)

# Make copy of loan_data
loan_data_replace <- loan_data

# Replace missing interest rates with median
loan_data_replace$int_rate[c(na_index)] <- median_ir

# Check if the NAs are gone
summary(loan_data_replace$int_rate)

COARSE CLASSIFICATION
It can be useful to keep NAs
Bins should be same

# Make the necessary replacements in the coarse classification example below 
loan_data$ir_cat <- rep(NA, length(loan_data$int_rate))

loan_data$ir_cat[which(loan_data$int_rate <= 8)] <- "0-8"
loan_data$ir_cat[which(loan_data$int_rate > 8 & loan_data$int_rate <= 11)] <- "8-11"
loan_data$ir_cat[which(loan_data$int_rate > 11 & loan_data$int_rate <= 13.5)] <- "11-13.5"
loan_data$ir_cat[which(loan_data$int_rate > 13.5)] <- "13.5+"
loan_data$ir_cat[which(is.na(loan_data$int_rate))] <- "Missing"

loan_data$ir_cat <- as.factor(loan_data$ir_cat)


TRAIN-TEST
# Set seed of 567
set.seed(567)

# Store row numbers for training set: index_train
index_train <- sample(1:nrow(loan_data), 2/3*nrow(loan_data))

# Create training set: training_set
training_set <- loan_data[index_train, ]

# Create test set: test_set
test_set <- loan_data[-index_train, ]

# Look at your new variable using plot()
plot(loan_data$ir_cat)


LOGISTIC REGRESSION
# Build a glm model with variable ir_cat as a predictor
log_model_cat <- glm(loan_status ~ ir_cat, family ='binomial', data= training_set)


# Print the parameter estimates 
summary(log_model_cat)

# Look at the different categories in ir_cat using table()
table(loan_data$ir_cat)
